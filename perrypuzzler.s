;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.import		_memcpy
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_get_pad_new
	.import		_set_scroll_y
	.export		_YellowSpr
	.export		_BlueSpr
	.export		_GoalFlag
	.export		_pad1
	.export		_pad1_new
	.export		_pad2
	.export		_pad2_new
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_level
	.export		_p_maps
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp_x
	.export		_temp_y
	.export		_game_mode
	.export		_show_text
	.export		_local_left
	.export		_local_right
	.export		_local_up
	.export		_local_down
	.export		_c_map
	.export		_BoxGuy1
	.export		_c1
	.export		_c2
	.export		_c3
	.export		_c4
	.export		_All_Collision_Maps
	.export		_level_text
	.export		_level_text_length
	.export		_level_player_x
	.export		_level_player_y
	.export		_level_goal_x
	.export		_level_goal_y
	.export		_palette_bg
	.export		_palette_sp
	.export		_draw_bg
	.export		_draw_sprites
	.export		_movement
	.export		_bg_collision
	.export		_check_start
	.export		_sprite_collision
	.export		_level_up
	.export		_init_level_text
	.export		_set_direction
	.export		_main

.segment	"DATA"

_BoxGuy1:
	.byte	$40
	.byte	$50
	.byte	$0F
	.byte	$0E

.segment	"RODATA"

_YellowSpr:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$40
	.byte	$80
_BlueSpr:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$41
	.byte	$80
_GoalFlag:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$13
	.byte	$00
	.byte	$80
_c1:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_c2:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_c3:
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
_c4:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_All_Collision_Maps:
	.addr	_c1
	.addr	_c2
	.addr	_c3
	.addr	_c4
_level_text:
	.addr	L03FF
	.addr	L0401
	.addr	L0403
	.addr	L0405
_level_text_length:
	.byte	$0B
	.byte	$0D
	.byte	$0B
	.byte	$10
_level_player_x:
	.byte	$40
	.byte	$3C
	.byte	$78
	.byte	$78
_level_player_y:
	.byte	$3C
	.byte	$3C
	.byte	$78
	.byte	$78
_level_goal_x:
	.byte	$B4
	.byte	$E1
	.byte	$B4
	.byte	$B4
_level_goal_y:
	.byte	$A0
	.byte	$1E
	.byte	$A0
	.byte	$A0
_palette_bg:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palette_sp:
	.byte	$28
	.byte	$16
	.byte	$13
	.byte	$1C
	.byte	$30
	.byte	$12
	.byte	$0F
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
L0453:
	.byte	$50,$65,$72,$69,$70,$68,$65,$72,$61,$6C,$20,$50,$61,$6C,$61,$63
	.byte	$65,$00
L0405:
	.byte	$54,$77,$6F,$20,$50,$6C,$61,$79,$65,$72,$20,$47,$61,$6D,$65,$00
L0401:
	.byte	$4E,$6F,$74,$20,$73,$6F,$20,$73,$69,$6D,$70,$6C,$65,$00
L0449:
	.byte	$46,$65,$72,$61,$6C,$20,$50,$65,$72,$72,$79,$27,$73,$00
L0403:
	.byte	$39,$30,$20,$44,$65,$67,$72,$65,$65,$73,$00
L03FF:
	.byte	$45,$61,$73,$79,$20,$50,$65,$61,$73,$79,$00
L059F:
	.byte	$4C,$65,$76,$65,$6C,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_pad2:
	.res	1,$00
_pad2_new:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_level:
	.res	1,$00
_p_maps:
	.res	2,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_game_mode:
	.res	1,$00
_show_text:
	.res	1,$00
_local_left:
	.res	1,$00
_local_right:
	.res	1,$00
_local_up:
	.res	1,$00
_local_down:
	.res	1,$00
.segment	"BSS"
_c_map:
	.res	240,$00

; ---------------------------------------------------------------
; void __near__ draw_bg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_bg: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; p_maps = All_Collision_Maps[level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L05E1
	inx
	clc
L05E1:	adc     #<(_All_Collision_Maps)
	sta     ptr1
	txa
	adc     #>(_All_Collision_Maps)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _p_maps+1
	dey
	lda     (ptr1),y
	sta     _p_maps
;
; memcpy(c_map, p_maps, 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	lda     _p_maps
	ldx     _p_maps+1
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; for (temp_y = 0; temp_y < 15; ++temp_y)
;
	lda     #$00
	sta     _temp_y
L05E2:	lda     _temp_y
	cmp     #$0F
	bcs     L04C6
;
; for (temp_x = 0; temp_x < 16; ++temp_x)
;
	lda     #$00
	sta     _temp_x
L05E3:	lda     _temp_x
	cmp     #$10
	bcs     L05E5
;
; temp1 = (temp_y << 4) + temp_x;
;
	lda     _temp_y
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     _temp_x
	sta     _temp1
;
; if (c_map[temp1])
;
	ldy     _temp1
	lda     _c_map,y
	beq     L05E4
;
; vram_put(0x10); // wall
;
	lda     #$10
	jsr     _vram_put
;
; vram_put(0x10);
;
	lda     #$10
;
; else
;
	jmp     L05DF
;
; vram_put(0); // blank
;
L05E4:	jsr     _vram_put
;
; vram_put(0);
;
	lda     #$00
L05DF:	jsr     _vram_put
;
; for (temp_x = 0; temp_x < 16; ++temp_x)
;
	inc     _temp_x
	jmp     L05E3
;
; for (temp_x = 0; temp_x < 16; ++temp_x)
;
L05E5:	lda     #$00
	sta     _temp_x
L05E6:	lda     _temp_x
	cmp     #$10
	bcs     L05E8
;
; temp1 = (temp_y << 4) + temp_x;
;
	lda     _temp_y
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     _temp_x
	sta     _temp1
;
; if (c_map[temp1])
;
	ldy     _temp1
	lda     _c_map,y
	beq     L05E7
;
; vram_put(0x10); // wall
;
	lda     #$10
	jsr     _vram_put
;
; vram_put(0x10);
;
	lda     #$10
;
; else
;
	jmp     L05E0
;
; vram_put(0); // blank
;
L05E7:	jsr     _vram_put
;
; vram_put(0);
;
	lda     #$00
L05E0:	jsr     _vram_put
;
; for (temp_x = 0; temp_x < 16; ++temp_x)
;
	inc     _temp_x
	jmp     L05E6
;
; for (temp_y = 0; temp_y < 15; ++temp_y)
;
L05E8:	inc     _temp_y
	jmp     L05E2
;
; ppu_on_all(); // turn on screen
;
L04C6:	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; oam_meta_spr(BoxGuy1.X, BoxGuy1.Y, YellowSpr);
;
	jsr     decsp2
	lda     _BoxGuy1
	ldy     #$01
	sta     (sp),y
	lda     _BoxGuy1+1
	dey
	sta     (sp),y
	lda     #<(_YellowSpr)
	ldx     #>(_YellowSpr)
	jsr     _oam_meta_spr
;
; oam_meta_spr(level_goal_x[level], level_goal_y[level], GoalFlag);
;
	jsr     decsp2
	ldy     _level
	lda     _level_goal_x,y
	ldy     #$01
	sta     (sp),y
	ldy     _level
	lda     _level_goal_y,y
	ldy     #$00
	sta     (sp),y
	lda     #<(_GoalFlag)
	ldx     #>(_GoalFlag)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; if (pad1 & local_left)
;
	lda     _local_left
	and     _pad1
	pha
	pla
	beq     L05EB
;
; BoxGuy1.X -= 1;
;
	dec     _BoxGuy1
;
; else if (pad1 & local_right)
;
	jmp     L0512
L05EB:	lda     _local_right
	and     _pad1
	pha
	pla
	beq     L0512
;
; BoxGuy1.X += 1;
;
	inc     _BoxGuy1
;
; bg_collision();
;
L0512:	jsr     _bg_collision
;
; if (collision_R)
;
	lda     _collision_R
	beq     L0517
;
; BoxGuy1.X -= 1;
;
	dec     _BoxGuy1
;
; if (collision_L)
;
L0517:	lda     _collision_L
	beq     L051B
;
; BoxGuy1.X += 1;
;
	inc     _BoxGuy1
;
; if (pad1 & local_up)
;
L051B:	lda     _local_up
	and     _pad1
	pha
	pla
	beq     L05EC
;
; BoxGuy1.Y -= 1;
;
	dec     _BoxGuy1+1
;
; else if (pad1 & local_down)
;
	jmp     L0524
L05EC:	lda     _local_down
	and     _pad1
	pha
	pla
	beq     L0524
;
; BoxGuy1.Y += 1;
;
	inc     _BoxGuy1+1
;
; bg_collision();
;
L0524:	jsr     _bg_collision
;
; if (collision_D)
;
	lda     _collision_D
	beq     L0529
;
; BoxGuy1.Y -= 1;
;
	dec     _BoxGuy1+1
;
; if (collision_U)
;
L0529:	lda     _collision_U
	beq     L052D
;
; BoxGuy1.Y += 1;
;
	inc     _BoxGuy1+1
;
; }
;
L052D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision: near

.segment	"CODE"

;
; collision_L = 0;
;
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	sta     _collision_R
;
; collision_U = 0;
;
	sta     _collision_U
;
; collision_D = 0;
;
	sta     _collision_D
;
; temp_x = BoxGuy1.X; // left side
;
	lda     _BoxGuy1
	sta     _temp_x
;
; temp_y = BoxGuy1.Y; // top side
;
	lda     _BoxGuy1+1
	sta     _temp_y
;
; if (temp_y >= 0xf0)
;
	cmp     #$F0
;
; return;
;
	bcc     L05F6
;
; }
;
	rts
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // upper left
;
L05F6:	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if (c_map[coordinates])
;
	ldy     _coordinates
	lda     _c_map,y
	beq     L05EF
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_U;
;
	inc     _collision_U
;
; temp_x = BoxGuy1.X + BoxGuy1.width; // right side
;
L05EF:	lda     _BoxGuy1
	clc
	adc     _BoxGuy1+2
	sta     _temp_x
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // upper right
;
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if (c_map[coordinates])
;
	ldy     _coordinates
	lda     _c_map,y
	beq     L05F0
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_U;
;
	inc     _collision_U
;
; temp_y = BoxGuy1.Y + BoxGuy1.height; // bottom side
;
L05F0:	lda     _BoxGuy1+1
	clc
	adc     _BoxGuy1+3
	sta     _temp_y
;
; if (temp_y >= 0xf0)
;
	cmp     #$F0
;
; return;
;
	bcs     L057E
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // bottom right
;
	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if (c_map[coordinates])
;
	ldy     _coordinates
	lda     _c_map,y
	beq     L05F1
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_D;
;
	inc     _collision_D
;
; temp_x = BoxGuy1.X; // left side
;
L05F1:	lda     _BoxGuy1
	sta     _temp_x
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // bottom left
;
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if (c_map[coordinates])
;
	ldy     _coordinates
	lda     _c_map,y
	beq     L057E
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_D;
;
	inc     _collision_D
;
; }
;
L057E:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_start (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_start: near

.segment	"CODE"

;
; if (pad1_new & PAD_START)
;
	lda     _pad1_new
	and     #$10
	beq     L05BF
;
; ++level;
;
	inc     _level
;
; if (level >= 4)
;
	lda     _level
	cmp     #$04
	bcc     L05F7
;
; level = 0;
;
	lda     #$00
	sta     _level
;
; game_mode = MODE_LEVEL_TITLE;
;
L05F7:	lda     #$05
	sta     _game_mode
;
; init_level_text();
;
	jmp     _init_level_text
;
; }
;
L05BF:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ sprite_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sprite_collision: near

.segment	"CODE"

;
; if (BoxGuy1.X >= level_goal_x[level]-3 && BoxGuy1.X <= level_goal_x[level]+3
;
	lda     _BoxGuy1
	jsr     pusha0
	ldy     _level
	lda     _level_goal_x,y
	sec
	sbc     #$03
	bcs     L0536
	ldx     #$FF
L0536:	jsr     tosicmp
	bcc     L0537
	lda     _BoxGuy1
	jsr     pusha0
	ldy     _level
	lda     _level_goal_x,y
;
; && BoxGuy1.Y >= level_goal_y[level]-3 && BoxGuy1.Y <= level_goal_y[level]+3)
;
	clc
	adc     #$03
	bcc     L053A
	ldx     #$01
L053A:	jsr     tosicmp
	beq     L05F8
	bcs     L0537
L05F8:	lda     _BoxGuy1+1
	jsr     pusha0
	ldy     _level
	lda     _level_goal_y,y
	sec
	sbc     #$03
	bcs     L053D
	ldx     #$FF
L053D:	jsr     tosicmp
	bcc     L0537
	lda     _BoxGuy1+1
	jsr     pusha0
	ldy     _level
	lda     _level_goal_y,y
	clc
	adc     #$03
	bcc     L0540
	ldx     #$01
L0540:	jsr     tosicmp
	bcc     L0533
	beq     L0533
L0537:	rts
;
; level_up();
;
L0533:	jsr     _level_up
;
; show_text = 1;
;
	lda     #$01
	sta     _show_text
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ level_up (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_level_up: near

.segment	"CODE"

;
; ++level;
;
	inc     _level
;
; if (level >= 4)
;
	lda     _level
	cmp     #$04
	bcc     L05F9
;
; level = 0;
;
	lda     #$00
	sta     _level
;
; game_mode = MODE_LEVEL_TITLE;
;
L05F9:	lda     #$05
	sta     _game_mode
;
; init_level_text();
;
	jmp     _init_level_text

.endproc

; ---------------------------------------------------------------
; void __near__ init_level_text (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_level_text: near

.segment	"CODE"

;
; BoxGuy1.X = level_player_x[level];
;
	ldy     _level
	lda     _level_player_x,y
	sta     _BoxGuy1
;
; BoxGuy1.Y = level_player_y[level];
;
	ldy     _level
	lda     _level_player_y,y
	sta     _BoxGuy1+1
;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0, 0x1000);
;
	lda     #$00
	jsr     pusha
	ldx     #$10
	jsr     _vram_fill
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; multi_vram_buffer_horz("Level", 5, NTADR_A(3,7));
;
	jsr     decsp3
	lda     #<(L059F)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L059F)
	sta     (sp),y
	lda     #$05
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$E3
	jsr     _multi_vram_buffer_horz
;
; one_vram_buffer(49+level, NTADR_A(9,7));
;
	lda     _level
	clc
	adc     #$31
	jsr     pusha
	ldx     #$20
	lda     #$E9
	jsr     _one_vram_buffer
;
; multi_vram_buffer_horz(level_text[level], level_text_length[level], NTADR_A(3,10));
;
	jsr     decsp3
	ldx     #$00
	lda     _level
	asl     a
	bcc     L05FB
	inx
	clc
L05FB:	adc     #<(_level_text)
	sta     ptr1
	txa
	adc     #>(_level_text)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	iny
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     _level
	lda     _level_text_length,y
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$43
	jsr     _multi_vram_buffer_horz
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ set_direction (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_direction: near

.segment	"CODE"

;
; local_up = PAD_UP;
;
	lda     #$08
	sta     _local_up
;
; local_down = PAD_DOWN;
;
	lda     #$04
	sta     _local_down
;
; local_left = PAD_LEFT;
;
	lda     #$02
	sta     _local_left
;
; local_right = PAD_RIGHT;
;
	lda     #$01
	sta     _local_right
;
; if(level == 2){
;
	lda     _level
	cmp     #$02
	bne     L05D2
;
; local_up = PAD_LEFT;
;
	sta     _local_up
;
; local_down = PAD_RIGHT;
;
	lda     #$01
	sta     _local_down
;
; local_left = PAD_DOWN;
;
	lda     #$04
	sta     _local_left
;
; local_right = PAD_UP;
;
	lda     #$08
	sta     _local_right
;
; }
;
L05D2:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);  
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_scroll_y(0xff); // shift the bg down 1 pixel
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; set_vram_buffer();
;
	jsr     _set_vram_buffer
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; ppu_off();
;
	jsr     _ppu_off
;
; multi_vram_buffer_horz("Feral Perry's", 13, NTADR_A(9,10));
;
	jsr     decsp3
	lda     #<(L0449)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L0449)
	sta     (sp),y
	lda     #$0D
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$49
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("Peripheral Palace", 17, NTADR_A(7,12));
;
	jsr     decsp3
	lda     #<(L0453)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L0453)
	sta     (sp),y
	lda     #$11
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$87
	jsr     _multi_vram_buffer_horz
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; game_mode = MODE_TITLE;
;
L0605:	lda     #$00
L05FC:	sta     _game_mode
;
; if (game_mode == MODE_TITLE)
;
L05FE:	lda     _game_mode
	bne     L05FF
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_START)
;
	and     #$10
	beq     L05FE
;
; level = 0; //debug this value
;
	lda     #$00
	sta     _level
;
; init_level_text();
;
	jsr     _init_level_text
;
; game_mode = MODE_LEVEL_TITLE;
;
	lda     #$05
;
; else if (game_mode == MODE_GAME_OVER)
;
	jmp     L05FC
L05FF:	lda     _game_mode
	cmp     #$07
	bne     L0600
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_START)
;
	and     #$10
	beq     L05FE
;
; game_mode = MODE_GAME;
;
	lda     #$01
;
; else if (game_mode == MODE_LEVEL_SELECT)
;
	jmp     L05FC
L0600:	lda     _game_mode
	cmp     #$06
	bne     L0601
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_START)
;
	and     #$10
	beq     L05FE
;
; game_mode = MODE_GAME;
;
	lda     #$01
;
; else if (game_mode == MODE_LEVEL_TITLE)
;
	jmp     L05FC
L0601:	lda     _game_mode
	cmp     #$05
	bne     L0602
;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_START)
;
	and     #$10
	jeq     L05FE
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; draw_bg(); 
;
	jsr     _draw_bg
;
; set_direction();
;
	jsr     _set_direction
;
; else if (game_mode == MODE_GAME)
;
	jmp     L05FE
L0602:	lda     _game_mode
	cmp     #$01
	jne     L0605
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; if(level == 3){
;
	lda     _level
	cmp     #$03
	bne     L04A4
;
; pad1 = pad_poll(1);     // read the first controller
;
	lda     #$01
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(1); // newly pressed button. do pad_poll first
;
	lda     #$01
;
; } else {
;
	jmp     L0604
;
; pad1 = pad_poll(0);     // read the first controller
;
L04A4:	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0); // newly pressed button. do pad_poll first
;
	lda     #$00
L0604:	jsr     _get_pad_new
	sta     _pad1_new
;
; movement();
;
	jsr     _movement
;
; sprite_collision();
;
	jsr     _sprite_collision
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; check_start();
;
	jsr     _check_start
;
; else
;
	jmp     L05FE

.endproc

